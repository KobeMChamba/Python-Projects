import requests
import pprint

import chess.pgn
from collections import Counter
from io import StringIO

# Import the categorize_eco function from ECOCAT.py
from ECOCAT import categorize_eco

# Replace with your Chess.com username
username = "kobe_chamba"

printer = pprint.PrettyPrinter()

def fetch_games(username):
    url = f"https://api.chess.com/pub/player/{username}/games/archives"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        # printer.pprint(data)
    else:
        print(f"Failed to fetch games. Status code: {response.status_code}")
        return []

    archives = response.json()['archives']
    # printer.pprint(archives)
    games = []

    # For starting out we only want the last month
    # archives = ['https://api.chess.com/pub/player/kobe_chamba/games/2024/07']
    for archive_url in archives:
        archive_response = requests.get(archive_url, headers=headers)
        games.extend(archive_response.json()['games'])

    return games

def extract_opening(game_pgn):
    pgn = StringIO(game_pgn)
    game = chess.pgn.read_game(pgn)
    headers = game.headers
    # print(headers)  # Debugging: Print the headers to see what they contain
    # printer.pprint(headers)
    eco = headers.get("ECO", "Unknown")
    # print(eco)
    eco = categorize_eco(eco)
    return eco

def main():
    games = fetch_games(username)
    print("fetch games done")
    opening_counter = Counter()
    
    for game in games:
        opening = extract_opening(game['pgn'])
        opening_counter[opening] += 1
    
    # Sort the openings by count in descending order
    sorted_openings = sorted(opening_counter.items(), key=lambda item: item[1], reverse=True)


    for opening, count in sorted_openings:
        print(f"{opening}: {count}")

if __name__ == "__main__":
    main()
