10/1
Lego Blocks
Problem requirements:
Calculate the number of ways an nxm wall can be built with 1x1, 1x2, 1x3, 1x4 blocks
Walls may not have vertical breaks or holes
 
Solution:
Create a base case for combinations of 1x0,1x1,1x2,1x3 walls
Sum last 4 cases of the wall and append to end of the list
continue to do so until list has the number of combinations for an m sized wall of height 1

Calculate combinations for N tall wall
set combinations to nth power for each width

Remove unstable combinations
No holes in our combinations, only need to find vertical breaks
No unstable combinations in 1x0 or 1x1

10/9
Weighted Uniform Strings
Problem requirements:
For each value in queries, return yes or no, depending on if the value is equal to any of the possible string weights. 
String weights are equal to the length of a uniform subset of characters where their weight is 1 for a, 2 for b, etc.

Solution: 
Hard code letter values
Compare each letter to the previous letter
if equal, increase counter
if not, add to dictionary if the value is greater than the existing value (replacing bb with bbb aka {b: 2} with {b: 3})
If there was only one letter: add it to dictionary
If it was the last letter: add it to dictionary (include previous checks)
Then go through queries and check for divisibility and sufficient length of strength
Return answers

What I learned:
Practiced use of dictionaries and iterating through list

Improvements to code:
I do not have to hardcode weights, could calculate them easily
Could store weight and length in the dictionary so i wouldnt need two dictionaries
Could check current character with next character and then just add the last one in

