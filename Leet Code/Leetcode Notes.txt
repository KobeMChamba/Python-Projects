9/23/2024
11.Container With Most Water
Two Pointer Problem
Solution: Create pointers at both ends of the list and bring them in, checking if area
of water increases
Always bring in the shorter side (moving in taller side will never increase area), as it 
is what limits the height of the area

Prev attempts: Tried finding the two tallest heights and moving out from that
Kept trying to optimize left side first and then right side, should've been optimizing the 
shorter side.

9/24/2024
209. Minimum Size Subarray Sum.py
Sliding Window
Solution: First create a result val with a value of inf. Then, create pointer at start of array, move second pointer (j) down the array.
At each step, increase the the total. After each step, go into a second loop that does 2 things while the total is greater than the target.
1. Decrease val to i - j + 1 if possible, else stay the same
2. Subtract nums[i] from total and move i one element right. This makes your sliding window
as small as possible, saving the length when it was at its smallest valid point and brings the total to below the target, allowing it to grow to target on the next step of j. 

Prev Attempts: I realized I had to create a sliding window but was incorrectly iterating and was unsure when to move the first pointer right. 
I was also not saving the shorted subarray length and was simply trying to find the best one, complicating the algorithm.

9/26/2024
36. Valid Sudoko.py
Solution: Write a variable to keep track of valid numbers we have seen. Once we see one, store 3 tupes, one with its col positiona and the number,
one with the row position and the number, and one with the number and which box it is in (ground divide its row and col by 3). If we do this for each
number in the array then we can evemtually find if there is a row, col, or box repeat by simplifing the original var to a set (gets rid of repeats) and
checking its length against the original length.

Prev attempt: My less efficient solution was to iterate thru rows, cols, and boxes, one after another, and keeping a dict for each run, checking for repeats
My solution is 3 times slower because I was not thinking about how I can do a single run through the array and store information about its position once for all 3 important factors.
Instead I looped 3 times, once for each factor.

10/1/2024
383. Ransom Note
Solution: 
Create a list of 26, increment count for each letter in magazine. Decrement count with each letter in ransomnote. If less
than 0, return False. 

Prev attempt: My solution was basically the same except I used a hashmap, which is slightly slower as there is a fixed number
of letters we will see.

49. Group Anagrams
Solution:
Create a dictionary, for each word sort it and use the sorted word as a key in the dictionary. Add the unsorted word as a value
Return the values of the dictionary

Prev attempt: Used a dictionary instead of a defaultdict(list) which is slightly faster as it has Automatic key initialization,
can directly append, and simplifies code.

10/2/2024
228. Summary Ranges
Solution:
Set first num in list to start and end. Iterate 1 through EOL, checking if current num is not num[i-1] + 1. If so,
print out current range. Else, update end. Finally, print range if not in result. Print result.

56. Merge intervals
Solution:
Sort the intervals by their first element. Iterate through intervals, append to results if empty or if the start is greater than
the last interval's end. The last interval can be found with with ans[-1]. Otherwise, we know that the next interval must
start before or at the last interval's end so the two can be combined. Can know how to combine using max().

10/7/2024
20. Valid Parentheses
Solution:
Easy stack problem where we just append items to end of list, make comparisons, and pop from the end as well.

10/18/2024
2. Add Two Numbers 
Solution:
Create a dummy node for the result. Iterate while l1 or l2, udpate a val var for each if exists, and add them up with "carry". Set it to current.next.
After the loop, if there's any carry left, create a new node for it. Return dumny.next. 

10/21/2024
4. Median Array of Sorted Arrays
Solution: 
The goal of the algorithm is to use binary search on both lists. We can create a partition 
in each list so that all the elements on the left side of the partition are smaller than 
the right side of the second partition and all the elements on the left side of the second partition
are smaller than the right side of the first partition.

1. Ensure that the first list is smaller
2. define m, n, low, and heigh
m defines limit of the first array and the starting "high"
3. while low <= high
loop keeps us in both arrays and if not, we are not using sorted arrays
    4. create partitions of both arrays. If the partition value is 2 that means that there
    is a partition between values 1 and 2. To start we use the midpoint of m for partition1
    Then we use m + n + 1 // - partition 1 in order to place the second partition so that
    there are equal amounts on both sides!
    5. With these partitions we can get maxleft and minright (the numbers to the left and right
    of each partition). 
    
    6. Check that maxleft1 < minright2 and maxleft2 < minright1
        7. If so, we have the right partition, and can return the Median
        Make sure to check if odd or even to get it right (take max of maxlefts) or halfway point of max maxleft or min minright

        8. If not, if maxleft 1 > minright 2, this means that the partition1 is too far to the right 
        To move it to the left we can make high equal to the partition - 1. This moves partition1 halfway down its remaining left side.
        Partition2 is automatically adjusted to the right 

        9. Else, this means that the partition is too far to the right. We can move it left by increasing the partition to partition +1. 
        This moves the partition halfway up to itrs remaining right side 
    
    If this process fails, we know they are not in the right order so we can raise an error.
