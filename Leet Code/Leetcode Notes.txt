9/23/2024
11.Container With Most Water
Two Pointer Problem
Solution: Create pointers at both ends of the list and bring them in, checking if area
of water increases
Always bring in the shorter side (moving in taller side will never increase area), as it 
is what limits the height of the area

Prev attempts: Tried finding the two tallest heights and moving out from that
Kept trying to optimize left side first and then right side, should've been optimizing the 
shorter side.

9/24/2024
209. Minimum Size Subarray Sum.py
Sliding Window
Solution: First create a result val with a value of inf. Then, create pointer at start of array, move second pointer (j) down the array.
At each step, increase the the total. After each step, go into a second loop that does 2 things while the total is greater than the target.
1. Decrease val to i - j + 1 if possible, else stay the same
2. Subtract nums[i] from total and move i one element right. This makes your sliding window
as small as possible, saving the length when it was at its smallest valid point and brings the total to below the target, allowing it to grow to target on the next step of j. 

Prev Attempts: I realized I had to create a sliding window but was incorrectly iterating and was unsure when to move the first pointer right. 
I was also not saving the shorted subarray length and was simply trying to find the best one, complicating the algorithm.

9/26/2024
36. Valid Sudoko.py
Solution: Write a variable to keep track of valid numbers we have seen. Once we see one, store 3 tupes, one with its col positiona and the number,
one with the row position and the number, and one with the number and which box it is in (ground divide its row and col by 3). If we do this for each
number in the array then we can evemtually find if there is a row, col, or box repeat by simplifing the original var to a set (gets rid of repeats) and
checking its length against the original length.

Prev attempt: My less efficient solution was to iterate thru rows, cols, and boxes, one after another, and keeping a dict for each run, checking for repeats
My solution is 3 times slower because I was not thinking about how I can do a single run through the array and store information about its position once for all 3 important factors.
Instead I looped 3 times, once for each factor.

10/1/2024
383. Ransom Note.py
Solution: 
Create a list of 26, increment count for each letter in magazine. Decrement count with each letter in ransomnote. If less
than 0, return False. 

Prev attempt: My solution was basically the same except I used a hashmap, which is slightly slower as there is a fixed number
of letters we will see.

49. Group Anagrams
Solution:
Create a dictionary, for each word sort it and use the sorted word as a key in the dictionary. Add the unsorted word as a value
Return the values of the dictionary

Prev attempt: Used a dictionary instead of a defaultdict(list) which is slightly faster as it has Automatic key initialization,
can directly append, and simplifies code.